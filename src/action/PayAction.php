<?php

namespace shark\action;

use yii;
use yii\base\Action;
use Stripe;
use shark\models\forms\StripeForm;
use shark\models\Stripe as StripeModel;

class PayAction extends Action
{
    public $successCallback;

    public $config = [
        'callback_url' => '/successful',
        'setApiKey' => null, //sk_test_TpDfy0lzGjN0fOy2og38jdHm
    ];

    public function beforeRun()
    {
        if (isset($this->successCallback[0]) && is_array($this->successCallback[0])) {
            $this->config = array_merge($this->config, $this->successCallback[0]);
        }

        parent::beforeRun(); // TODO: Change the autogenerated stub
        return true;
    }

    /**
     * Runs the action.
     */
    public function run()
    {
        $status = StripeModel::STATUS_ERROR_APP;
        $charge = null;
        $stripeForm = new StripeForm();
        try {

            if ($stripeForm->load(Yii::$app->request->post()) && $stripeForm->validate()) {

                if (null == $this->config['setApiKey']) {
                    throw new \Exception('Token is failed');
                }

                Stripe\Stripe::setApiKey($this->config['setApiKey']);

                $charge = Stripe\Charge::create([
                    "amount" => $stripeForm->amount,
                    "currency" => $stripeForm->currency,
                    "description" => $stripeForm->description,
                    "source" => $stripeForm->source,
                ]);

                $stripeModel = new StripeModel();
                $stripeModel->log($stripeForm, $charge);
                $status = $stripeModel->status;
            }

        } catch(Stripe\Error\Card $e) {
            $status = StripeModel::STATUS_ERROR_STRIPE;
        } catch(\Exception $e) {
            $status = StripeModel::STATUS_ERROR_APP;
        }

        return $this->controller->redirect([
                $this->config['callback_url'],
                'status' => $status,
                'charge' => $charge
            ]);
    }
}